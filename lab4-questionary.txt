=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a singleline.

=== Q Compare kern/mpentry.S side by side with boot/boot.S. Bearing in
===   mind that kern/mpentry.S is compiled and linked to run above KERNBASE
===   just like everything else in the kernel, what is the purpose of macro
===   MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in
===   boot/boot.S? In other words, what could go wrong if it were
===   omitted in kern/mpentry.S?
===   (free form)
In boot.S the addresses are absoulte becase boot.S is running from address 0 (cs=0). In mpentry.S we need to fix the addresses to where we are running (MPENTRY_PADDR).

=== Q It seems that using the big kernel lock guarantees that only one
===   CPU can run the kernel code at a time. Why do we still need
===   separate kernel stacks for each CPU? Describe a scenario in
===   which using a shared kernel stack will go wrong, even with the
===   protection of the big kernel lock.
===   (free form)
When doing a blocking operation (like reading from a device or recieving an ipc), we may release the lock because we not really using the kernel. At this point other cpu may use the kernel with its own stack. If we used the same stack we were in a problem.

=== Q Whenever the kernel switches from one environment to another, it
===   must ensure the old environment's registers are saved so they
===   can be restored properly later. Where does this happen?
===   (JOS function name)
_alltraps

=== Q In your implementation of env_run() you should have called
===   lcr3(). Before and after the call to lcr3(), your code makes
===   references (at least it should) to the variable e, the argument
===   to env_run. Upon loading the %cr3 register, the addressing
===   context used by the MMU is instantly changed. But a virtual
===   address (namely e) has meaning relative to a given address 
===   context--the address context specifies the physical address to
===   which the virtual address maps. Why can the pointer e be
===   dereferenced both before and after the addressing switch?
===   (one sentence, free form)
Because its address is in the kernel address space, and this space is shared between all environments mapping.

=== Q In Ex. 4, what happens if the user environment runs out of
===   space on the exception stack?
===   (one setence, free form)
It will reach the empty memory and will fail in the next page fault (at user_mem_assert)

=== Q In dumpfork.c, the first time you call duppage(), the function
===   allocates a page in one environment (env A) and then maps it in
===   another (env B). At whataddress is the page mapped in env A, and
===   at what address is it mapped in env B?
===   (ADDR(in env A):ADDR(in env B) (example: 0xAAAAAAAA:0xBBBBBBBB)
0x800000:0x400000
====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
10

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
kern/Makefrag
kern/env.c
user/calc.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
We used a new process for each operation and let them communicate using ipc message (similar to primes program).
Since each message is 32 bits and we want rational numbers we packed it as two 16 bits numbers (a/b). Because we used 16 bits the answer is wrong from x^7. (We tried 8/24 instead of 16/16 but it gives us same results.)
However, we validated with wolphramalfa that the first numbers are correct.

In our solution each process know from whom it gets the data but not who it sent it to. We also add a synchronization mechanism (send/recv functions). Each process assume it has only one reader, except dup_proc which assumes it has two readers. dup_proc waits for both readers to be ready before it sends the data (this is why we add a dummy 0 to G at sub_proc).

In order to reduce the noise, we add a CHALLENGE define to kern/env.c. With this define, we skip the printing of new environment so we can see the results more clearly.

In addition, we make all challenges from previous labs work with this lab (sysenter works with each syscall it can and big pages allocation works with SUPERPAGES define).
